import pygamefrom pygame.locals import *import timeimport sysclass Pong(object):	def __init__(self, screensize):				self.centerx = int(screensize[0]*0.5)		self.centery = int(screensize[1]*0.5)		self.radius = 8			self.rect = pygame.Rect(self.centerx-self.radius,					self.centery-self.radius,					self.radius*2,self.radius*2)		self.color = (100,100,255)		self.direction = [1,1]		self.speedx = 5		self.speedy = 4		self.hit_edge_left = False		self.hit_edge_right = False		self.screensize = screensize		self.section = 0		#CODE TASK: change speed as game progresses to make it harder                #CODE BONUS: adjust ratio of x and y speeds to make it harder as game progresses	def update(self, player_paddle, ai_paddle):				self.centerx += self.direction[0]*self.speedx		self.centery += self.direction[1]*self.speedy				self.rect.center =  (self.centerx, self.centery)		if self.rect.top <= 0:			self.direction[1] = 1		elif self.rect.bottom >= self.screensize[1]-1:			self.direction[1] = -1				if self.rect.right >= self.screensize[0] - 1:			self.hit_edge_right = True		elif self.rect.left <= 0:			self.hit_edge_left = True		if self.rect.colliderect(player_paddle.rect):			self.getWhereHitPlayer(player_paddle.rect)			self.direction[0] = 1					if self.rect.colliderect(ai_paddle.rect):			self.getWhereHitAI(ai_paddle.rect)			self.direction[0] = -1				def render(self, screen):                pygame.draw.circle(screen, self.color, self.rect.center, self.radius, 0)                pygame.draw.circle(screen, (0,0,0), self.rect.center, self.radius, 1)	def getWhereHitPlayer(self, paddle):		if self.rect.left <= (paddle.top + 40):			self.speedy += 1		elif self.rect.left > (paddle.top + 40) and self.rect.left <= (paddle.top + 80):			self.speedy -= 1		elif self.rect.left > (paddle.top + 80) and self.rect.left <= (paddle.top + 120):			self.speedy += 1	def getWhereHitAI(self,paddle):		if self.rect.right <= (paddle.top + 40):			self.speedy += 1		elif self.rect.right > (paddle.top + 40) and self.rect.left <= (paddle.top + 80):			self.speedy -= 1		elif self.rect.right > (paddle.top + 80) and self.rect.left <= (paddle.top + 120):			self.speedy += 1class AIPaddle(object):        def __init__(self, screensize):                self.screen_size = screensize                self.centerx = screensize[0]                self.centery = int(screensize[1]*0.5)                self.height = 120                self.width = 10                self.rect = pygame.Rect(0, self.centery-int(self.height*0.5), self.width, self.height)                self.color = (255, 0, 0)                #CODE TASK: Adjust size of AI paddle                self.speed = 7        def update(self, pong):                if pong.rect.top < self.rect.top:                        self.centery -= self.speed                elif pong.rect.bottom > self.rect.bottom:                        self.centery += self.speed                self.rect.center = (self.centerx, self.centery)        def render(self, screen):                pygame.draw.rect(screen, self.color, self.rect, 0)                pygame.draw.rect(screen, (255,255,255), self.rect, 1)class PlayerPaddle(object):        def __init__(self, screensize):                self.screensize = screensize                self.centerx = 5                self.centery = int(screensize[1]*0.5)                self.height = 120                self.width = 5                self.rect = pygame.Rect(0, self.centery-int(self.height*0.5), self.width, self.height)                self.color = (100, 255, 100)                #CODE TASK: Adjust size of Player paddle                self.speed = 4                self.direction = 0        def update(self):                self.centery += self.direction*self.speed                self.rect.center = (self.centerx, self.centery)                if self.rect.top < 0:                        self.rect.top = 0                if self.rect.bottom > self.screensize[1]-1:                        self.rect.bottom = self.screensize[1]-1        def render(self, screen):                pygame.draw.rect(screen, self.color, self.rect, 0)                pygame.draw.rect(screen, (255,255,255), self.rect, 1)class TwoPlayerPaddle(object):        def __init__(self, screensize):			self.screensize = screensize			self.centerx = screensize[0]			self.centery = int(screensize[1]*0.5)			self.height = 120			self.width = 10			self.rect = pygame.Rect(0, self.centery-int(self.height*0.5), self.width, self.height)			self.color = (100, 255, 100)			#CODE TASK: Adjust size of Player paddle			self.speed = 4			self.direction = 0        def update(self):                self.centery += self.direction*self.speed                self.rect.center = (self.centerx, self.centery)                if self.rect.top < 0:                        self.rect.top = 0                if self.rect.bottom > self.screensize[1]-1:                        self.rect.bottom = self.screensize[1]-1        def render(self, screen):                pygame.draw.rect(screen, self.color, self.rect, 0)                pygame.draw.rect(screen, (255,255,255), self.rect, 1)				class OnePlayer_StartUp(object):	def __init__(self):		pygame.init()		self.screensize = (640, 380)		self.screen = pygame.display.set_mode(self.screensize)		pygame.display.set_caption('Pong!')		self.clock = pygame.time.Clock()		self.pong = Pong(self.screensize)		self.playerPaddle = PlayerPaddle(self.screensize)		self.aiPaddle = AIPaddle(self.screensize)		self.line = pygame.Rect((self.screensize[0]/2) - 5, 0, 5, self.screensize[1])		self.font = pygame.font.SysFont('Arial', 72)		self.pointFont = pygame.font.SysFont('Arial', 64)		self.playerPoints = 0		self.aiPoints = 0		self.running = True		self.Main()	def Refresh(self):		self.clock = pygame.time.Clock()		self.pong = Pong(self.screensize)		self.playerPaddle = PlayerPaddle(self.screensize)		self.aiPaddle = AIPaddle(self.screensize)		self.line = pygame.Rect((self.screensize[0]/2) - 5, 0, 5, self.screensize[1])		self.font = pygame.font.SysFont('Arial', 72)		self.pointFont = pygame.font.SysFont('Arial', 64)		self.running = True		time.sleep(0.5)		self.Main()	def Main(self):			if self.playerPoints >= 7:				self.screen.fill((0,0,0))				self.screen.blit(self.font.render('You Win', True, (100, 255, 100)), ((self.screensize[0]/2) - 115, self.screensize[1]/2) - 50)				pygame.display.flip()				time.sleep(5)				self.running = False								if self.aiPoints >= 7:				self.screen.fill((0,0,0))							self.screen.blit(self.font.render('You Lose', True, (255, 0, 0)), ((self.screensize[0]/2) - 115, self.screensize[1]/2 - 50))				pygame.display.flip()				time.sleep(5)				self.running = False							while self.running == True:				#fps limiting 				self.clock.tick(64)				#event handling phase				for event in pygame.event.get():						if event.type == KEYDOWN:						if event.key == K_UP:							self.playerPaddle.direction = -1						elif event.key == K_DOWN:							self.playerPaddle.direction = 1						elif event.key == K_ESCAPE:							pygame.quit()							sys.exit()					if event.type == KEYUP:						if event.key == K_UP and self.playerPaddle.direction == -1:						   self.playerPaddle.direction = 0						elif event.key == K_DOWN and self.playerPaddle.direction == 1:						   self.playerPaddle.direction = 0 				#object updating phase				self.aiPaddle.update(self.pong)				self.playerPaddle.update()				self.pong.update(self.playerPaddle, self.aiPaddle)								#CODE TASK: make some text on the screen over everything else saying you lost/won, and then exit on keypress				#CODE BONUS: Create reset				if self.pong.hit_edge_right:					self.playerPoints += 1					self.Refresh()				elif self.pong.hit_edge_left:					self.aiPoints += 1					self.Refresh()				#rendering phase				self.screen.fill((0,0,0))								pygame.draw.rect(self.screen, (255,255,255), self.line)				self.screen.blit(self.pointFont.render(str(self.playerPoints), False, (255, 255, 255)), (self.line.centerx - 50, 10))				self.screen.blit(self.pointFont.render(str(self.aiPoints), False, (255, 255, 255)), (self.line.centerx + 10, 10))				self.aiPaddle.render(self.screen)				self.playerPaddle.render(self.screen)				self.pong.render(self.screen)									pygame.display.flip()			self.playerPoints = 0			self.aiPoints = 0			return class TwoPlayer_StartUp(object):	def __init__(self):		pygame.init()		self.screensize = (640, 380)		self.screen = pygame.display.set_mode(self.screensize)		pygame.display.set_caption('Pong!')		self.clock = pygame.time.Clock()		self.pong = Pong(self.screensize)		self.playerPaddle = PlayerPaddle(self.screensize)		self.twoPlayer = TwoPlayerPaddle(self.screensize)		self.font = pygame.font.SysFont('Arial', 64)		self.otherFont = pygame.font.SysFont('Arial', 72)		self.running = True		self.line = pygame.Rect((self.screensize[0]/2) - 5, 0, 5, self.screensize[1])		self.playerPoints = 0		self.playerPointsTwo = 0		self.Main()	def Refresh(self):		self.pong = Pong(self.screensize)		self.playerPaddle = PlayerPaddle(self.screensize)		self.twoPlayer = TwoPlayerPaddle(self.screensize)		self.font = pygame.font.SysFont('Arial', 64)		self.otherFont = pygame.font.SysFont('Arial', 72)		self.line = pygame.Rect((self.screensize[0]/2) - 5, 0, 5, self.screensize[1])		self.running = True		time.sleep(0.5)		self.Main()	def Main(self):		if self.playerPoints >= 7:			self.screen.fill((0,0,0))			self.screen.blit(self.otherFont.render('Player One Wins', True, (255, 255, 255)), ((self.screensize[0]/2) - 200, (self.screensize[1]/2) - 30))			pygame.display.flip()			time.sleep(5)			self.running = False		if self.playerPointsTwo >= 7:			self.screen.fill((0,0,0))			self.screen.blit(self.otherFont.render('Player Two Wins', True, (255, 255, 255)), ((self.screensize[0]/2) - 200, (self.screensize[1]/2) - 30))			pygame.display.flip()			time.sleep(5)			self.running = False		while self.running == True:			self.clock.tick(64)			for event in pygame.event.get():				if event.type == KEYDOWN:					if event.key == K_UP:						self.playerPaddle.direction =  -1					elif event.key == K_DOWN:						self.playerPaddle.direction = 1					elif event.key == K_ESCAPE:						pygame.quit()						sys.exit()					elif event.key == K_w:						self.twoPlayer.direction = -1					elif event.key == K_s:						self.twoPlayer.direction = 1				if event.type == KEYUP:					if event.key == K_UP or event.key == K_DOWN:						self.playerPaddle.direction = 0					elif event.key == K_w or event.key == K_s:						self.twoPlayer.direction = 0							self.playerPaddle.update()			self.twoPlayer.update()			self.pong.update(self.playerPaddle, self.twoPlayer)						if self.pong.hit_edge_right:				self.playerPoints += 1				self.Refresh()			elif self.pong.hit_edge_left:				self.playerPointsTwo += 1				self.Refresh()							self.screen.fill((0,0,0))						pygame.draw.rect(self.screen, (255,255,255), self.line)			self.screen.blit(self.font.render(str(self.playerPoints), False, (255,255,255)), (self.line.center[0] - 50, 10))			self.screen.blit(self.font.render(str(self.playerPointsTwo), False, (255,255,255)), (self.line.center[0] + 10, 10))			self.playerPaddle.render(self.screen)			self.twoPlayer.render(self.screen)			self.pong.render(self.screen)						pygame.display.flip()					self.playerPoints = 0		self.playerPointsTwo = 0		return